<project name="apple-installer" basedir="../../">
    <property file="ant/project.properties"/>
    <import file="${basedir}/ant/version.xml"/>

    <!--
    ################################################################
    #                     Apple Installer                          #
    ################################################################
    -->

    <target name="build-pkg" depends="get-identity,add-certificates,get-version">
        <echo level="info">Creating installer using pkgbuild</echo>
        <!--
        #####################################
        #  Create scripts, payload and pkg  #
        #####################################
        -->

        <mkdir dir="${build.dir}/scripts/payload"/>

        <!-- Build app without sandboxing by default-->
        <property name="build.sandboxed" value="false"/>
        <antcall target="build-app">
            <param name="build.appdir" value="${build.dir}/scripts/payload/${project.name}.app"/>
        </antcall>

        <!-- scripts/ -->
        <copy file="ant/apple/apple-preinstall.sh.in" tofile="${build.dir}/scripts/preinstall">
            <filterchain><expandproperties/></filterchain>
        </copy>
        <copy file="ant/apple/apple-postinstall.sh.in" tofile="${build.dir}/scripts/postinstall">
            <filterchain><expandproperties/></filterchain>
        </copy>
        <chmod perm="a+x" type="file">
            <fileset dir="${build.dir}/scripts">
                <include name="preinstall"/>
                <include name="postinstall"/>
            </fileset>
        </chmod>

        <exec executable="pkgbuild" failonerror="true">
            <arg value="--identifier"/>
            <arg value="${project.filename}"/>

            <arg value="--nopayload"/>

            <arg value="--install-location"/>
            <arg value="/Applications/${project.name}.app"/>

            <arg value="--scripts"/>
            <arg value="${build.dir}/scripts"/>

            <arg value="--version"/>
            <arg value="${build.version}"/>

            <arg value="--sign"/>
            <arg value="${codesign.activeid}"/>

            <arg value="${out.dir}/${project.filename}${build.type}-${build.version}.pkg"/>
        </exec>
    </target>

    <target name="build-dmg" depends="get-identity,add-certificates,get-version">
        <echo level="info">Creating app bundle</echo>
        <!--
        #####################################
        #  Create payload and bundle as dmg #
        #####################################
        -->

        <!-- Dmg JSON -->
        <copy file="ant/apple/appdmg.json.in" tofile="${build.dir}/appdmg.json">
            <filterchain><expandproperties/></filterchain>
        </copy>

        <!-- Build app with sandboxing by default-->
        <property name="build.sandboxed" value="true"/>
        <antcall target="build-app">
            <param name="build.appdir" value="${build.dir}/${project.name}.app"/>
        </antcall>

        <exec executable="appdmg" failonerror="true">
            <arg value="${build.dir}/appdmg.json"/>
            <arg value="${out.dir}/${project.filename}${build.type}-${build.version}.dmg"/>
        </exec>
    </target>

    <target name="build-app" depends="get-identity">
        <!-- App Bundle -->
        <mkdir dir="${build.appdir}"/>

        <!-- Contents/ -->
        <copy file="ant/apple/apple-bundle.plist.in" tofile="${build.appdir}/Contents/Info.plist">
            <filterchain><expandproperties/></filterchain>
        </copy>

        <!-- Contents/MacOS/ -->
        <mkdir dir="${build.appdir}/Contents/MacOS"/>
        <copy file="ant/unix/unix-launcher.sh.in" tofile="${build.appdir}/Contents/MacOS/${project.name}">
            <filterchain><expandproperties/></filterchain>
        </copy>

        <!-- Contents/Resources/ -->
        <copy todir="${build.appdir}/Contents/Resources">
            <fileset dir="${dist.dir}">
                <include name="${project.filename}.jar"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </copy>
        <copy file="assets/branding/apple-icon.icns" tofile="${build.appdir}/Contents/Resources/${project.filename}.icns"/>

        <copy file="ant/unix/unix-uninstall.sh.in" tofile="${build.appdir}/Contents/Resources/uninstall">
            <filterchain><expandproperties/></filterchain>
        </copy>

        <copy todir="${build.appdir}/Contents/Resources/demo">
            <fileset dir="${dist.dir}/demo" includes="**"/>
        </copy>

        <!-- Java runtime -->
        <copy todir="${build.appdir}/Contents/PlugIns/Java.runtime">
            <fileset dir="${dist.dir}/Java.runtime" includes="**"/>
        </copy>
        <copy todir="${build.appdir}/Contents/Frameworks">
            <fileset dir="${dist.dir}/libs" includes="**"/>
        </copy>

        <copy todir="${build.appdir}">
            <fileset dir="${build.appdir}" includes="**"/>
        </copy>

        <!-- set payload files executable -->
        <chmod perm="a+x" type="file">
            <fileset dir="${build.appdir}">
                <include name="**/${project.name}"/>
                <include name="**/Resources/uninstall"/>
                <include name="**/bin/*"/>
                <include name="**/lib/jspawnhelper"/>
            </fileset>
        </chmod>

        <copy file="ant/apple/apple-entitlements.plist.in" tofile="${build.dir}/apple-entitlements.plist">
            <filterchain><expandproperties/></filterchain>
        </copy>

        <!-- use xargs to loop over and codesign all files-->
        <echo level="info" message="Signing ${build.appdir} using ${codesign.activeid}"/>
        <!-- Find -X fails on spaces but doesn't failonerror, this may lead to overlooked errors. -->
        <!-- Currently the only file that may contains a space is the main executable which we omit from signing anyway. -->
        <exec executable="bash" failonerror="true" dir="${build.appdir}">
            <arg value="-c"/>
            <arg value="find -X &quot;.&quot; -type f -not -path &quot;*/Contents/MacOS/*&quot; -exec sh -c 'file -I &quot;{}&quot; |grep -m1 &quot;x-mach-binary&quot;|cut -f 1 -d \:' \; |xargs codesign --force -s &quot;${codesign.activeid}&quot; --timestamp --options runtime"/>
        </exec>
        <exec executable="codesign" failonerror="true">
            <arg value="--force"/>
            <arg value="-s"/>
            <arg value="${codesign.activeid}"/>
            <arg value="--timestamp"/>
            <arg value="--options"/>
            <arg value="runtime"/>
            <arg value="--entitlement"/>
            <arg value="${build.dir}/apple-entitlements.plist"/>
            <arg value="${build.appdir}/Contents/PlugIns/Java.runtime/Contents/Home/bin/java"/>
            <arg value="${build.appdir}/Contents/PlugIns/Java.runtime"/>
        </exec>
        <exec executable="codesign" failonerror="true">
            <arg value="-s"/>
            <arg value="${codesign.activeid}"/>
            <arg value="--timestamp"/>
            <arg value="--options"/>
            <arg value="runtime"/>
            <arg value="--entitlement"/>
            <arg value="${build.dir}/apple-entitlements.plist"/>
            <arg value="${build.appdir}"/>
        </exec>

        <antcall target="verify-signature"/>
    </target>

    <target name="add-certificates" depends="get-identity">
        <exec executable="security">
            <arg value="add-certificates"/>
            <arg value="${basedir}/ant/apple/certs/apple-packager.cer"/>
            <arg value="${basedir}/ant/apple/certs/apple-intermediate.cer"/>
            <arg value="${basedir}/ant/apple/certs/apple-codesign.cer"/>
        </exec>
    </target>

    <target name="externalize-libs-mac" if="target.platform.mac">
        <echo level="info">Copying native library files to libs</echo>

        <copy todir="${dist.dir}/libs/" flatten="true" verbose="true">
                <zipfileset dir="lib">
                    <!--x86_64-->
                    <include name="**/darwin/*" if="target.x86_64"/> <!-- todo remove this when hid4java is updated -->
                    <include name="**/darwin-x86-64/*" if="target.x86_64"/> <!-- jna/hid4java -->
                    <include name="**/osx_64/*" if="target.x86_64"/> <!-- jssc -->
                    <!--aarch64-->
                    <include name="**/dummy/*" if="target.aarch64"/>
                    <include name="**/darwin-aarch64/*" if="target.aarch64"/> <!-- jna/hid4java -->
                    <include name="**/osx_arm64/*" if="target.aarch64"/> <!-- jssc -->
                </zipfileset>
        </copy>
    </target>

    <target name="get-identity">
        <property file="ant/apple/apple.properties"/>
        <!-- Ensure ${apple.packager.signid} is in Keychain -->
        <exec executable="bash" failonerror="false" resultproperty="codesign.qz">
            <arg value="-c"/>
            <arg value="security find-identity -v |grep '(${apple.packager.signid})'"/>
        </exec>
        <!-- Fallback to "-" (ad-hoc) if ${apple.packager.signid} isn't found -->
        <condition property="codesign.activeid" value="${apple.packager.signid}" else="-">
            <equals arg1="${codesign.qz}" arg2="0"/>
        </condition>
    </target>

    <target name="verify-signature">
        <echo level="info" message="Verifying Signatures"/>

        <exec executable="codesign" failonerror="false" resultproperty="signing.verification.jre">
            <arg value="-v"/>
            <arg value="--strict"/>
            <arg value="${build.appdir}/Contents/PlugIns/Java.runtime"/>
        </exec>

        <exec executable="codesign" failonerror="false" resultproperty="signing.verification.app">
            <arg value="-v"/>
            <arg value="--strict"/>
            <arg value="${build.appdir}"/>
        </exec>

        <condition property="signing.message.jre" value="Pass" else="Fail - This may prevent the application for launching.">
            <equals arg1="${signing.verification.jre}" arg2="0"/>
        </condition>
        <condition property="signing.message.app" value="Pass" else="Fail - This may prevent the application for launching.">
            <equals arg1="${signing.verification.app}" arg2="0"/>
        </condition>
<!--todo, what should this say? testing is needed-->
        <condition property="signing.message.identity" value=" - An ad hoc signature has been used. The resulting app may fail to run on other systems." else="">
            <equals arg1="${codesign.activeid}" arg2="-"/>
        </condition>

        <echo level="info" message="Jre Signature: ${signing.message.jre}"/>
        <echo level="info" message="App Signature: ${signing.message.app}${signing.message.identity}"/>
    </target>
</project>
